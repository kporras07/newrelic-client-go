package organization

import (
	"github.com/newrelic/newrelic-client-go/v2/internal/http"
	"github.com/newrelic/newrelic-client-go/v2/pkg/config"
	"github.com/newrelic/newrelic-client-go/v2/pkg/logging"
)

type Organization struct {
	client http.Client
	logger logging.Logger
	config config.Config
}

func New(config config.Config) Organization {
	client := http.NewClient(config)

	pkg := Organization{
		client: client,
		logger: config.GetLogger(),
		config: config,
	}
	return pkg
}

// The following types should have been generated by tutone, somehow that didn't happen.
type OrganizationCustomerOrganizationFilterInput struct {
	// Filter organizations by account ID.
	AccountID OrganizationAccountIDInput `json:"account_id,omitempty"`
	// Filter organizations by authentication domain.
	AuthenticationDomain OrganizationAuthenticationDomainInput `json:"authentication_domain,omitempty"`
	// Filter organizations by customer ID.
	CustomerID OrganizationCustomerIDInput `json:"customer_id,omitempty"`
	// Filter organizations by name.
	Name OrganizationNameInput `json:"name,omitempty"`
	// Filter organizations by organization ID.
	OrganizationID OrganizationOrganizationIDInput `json:"organization_id,omitempty"`
}

type OrganizationAccountIDInput struct {
	// An account ID
	Eq string `json:"eq,omitempty"`
}

type OrganizationAuthenticationDomainInput struct {
	// An authentication domain
	Eq string `json:"eq,omitempty"`
}

type OrganizationCustomerIDInput struct {
	// A customer ID
	Eq string `json:"eq,omitempty"`
}

type OrganizationNameInput struct {
	// Part of a name
	Contains string `json:"contains,omitempty"`
	// A name
	Eq string `json:"eq,omitempty"`
}

type OrganizationOrganizationIDInput struct {
	// An organization ID
	Eq string `json:"eq,omitempty"`
}
