// Code generated by tutone: DO NOT EDIT
package jobs

import "context"

// Organization Create job results
func (a *Jobs) GetOrganizationCreateAsyncResults(
	cursor string,
	filter OrganizationOrganizationCreateAsyncResultFilterInput,
) (*OrganizationOrganizationCreateAsyncResultCollection, error) {
	return a.GetOrganizationCreateAsyncResultsWithContext(context.Background(),
		cursor,
		filter,
	)
}

// Organization Create job results
func (a *Jobs) GetOrganizationCreateAsyncResultsWithContext(
	ctx context.Context,
	cursor string,
	filter OrganizationOrganizationCreateAsyncResultFilterInput,
) (*OrganizationOrganizationCreateAsyncResultCollection, error) {

	resp := organizationCreateAsyncResultsResponse{}
	vars := map[string]interface{}{
		"cursor": cursor,
		"filter": filter,
	}

	if err := a.client.NerdGraphQueryWithContext(ctx, getOrganizationCreateAsyncResultsQuery, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.CustomerAdministration.Jobs.OrganizationCreateAsyncResults, nil
}

const getOrganizationCreateAsyncResultsQuery = `query(
	$filter: OrganizationOrganizationCreateAsyncResultFilterInput!,
) { customerAdministration { jobs { organizationCreateAsyncResults(
	filter: $filter,
) {
	items {
		customer {
			customerId
		}
		job {
			createdUtc
			errorMessage
			finishedUtc
			id
			status
		}
		organization {
			id
			name
		}
	}
	nextCursor
} } } }`
